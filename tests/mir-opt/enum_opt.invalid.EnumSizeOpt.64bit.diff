- // MIR for `invalid` before EnumSizeOpt
+ // MIR for `invalid` after EnumSizeOpt
  
  fn invalid() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:18: +0:18
      let mut _1: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12
      let mut _2: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:36
      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:+2:26: +2:35
      scope 1 {
          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:+1:7: +1:12
      }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12
          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:29
          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:29
          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36
          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:26: +2:35
          _3 = [const 0_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:+2:26: +2:35
          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36
          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36
          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36
          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:35: +2:36
          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:36
          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:35: +2:36
          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:18: +3:2
          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+3:1: +3:2
          return;                          // scope 0 at $DIR/enum_opt.rs:+3:2: +3:2
      }
  }
  
