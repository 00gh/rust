// MIR for `test_or` after built

fn test_or() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: u8;
    let mut _4: Droppy;
    let mut _5: bool;
    let mut _6: u8;
    let mut _7: Droppy;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Droppy(const 0_u8);
        _3 = (_4.0: u8);
        _2 = Gt(move _3, const 0_u8);
        drop(_4) -> [return: bb4, unwind: bb10];
    }

    bb1: {
        _1 = const true;
        goto -> bb3;
    }

    bb2: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = Droppy(const 1_u8);
        _6 = (_7.0: u8);
        _5 = Gt(move _6, const 1_u8);
        drop(_7) -> [return: bb5, unwind: bb10];
    }

    bb3: {
        StorageDead(_5);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb7, otherwise: bb6];
    }

    bb4: {
        StorageDead(_4);
        StorageDead(_3);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb5: {
        StorageDead(_7);
        StorageDead(_6);
        _1 = move _5;
        goto -> bb3;
    }

    bb6: {
        _0 = const ();
        goto -> bb9;
    }

    bb7: {
        goto -> bb8;
    }

    bb8: {
        _0 = const ();
        goto -> bb9;
    }

    bb9: {
        StorageDead(_1);
        return;
    }

    bb10 (cleanup): {
        resume;
    }
}
