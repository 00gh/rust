// MIR for `vec_range` after PreCodegen

fn vec_range(_1: Vec<impl Sized>) -> () {
    debug v => _1;                       // in scope 0 at $DIR/loops.rs:+0:18: +0:23
    let mut _0: ();                      // return place in scope 0 at $DIR/loops.rs:+0:42: +0:42
    let mut _2: &std::vec::Vec<impl Sized>; // in scope 0 at $DIR/loops.rs:+1:17: +1:24
    let mut _3: usize;                   // in scope 0 at $DIR/loops.rs:+1:17: +1:24
    let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:24
    let mut _5: std::ops::Range<usize>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:24
    let mut _6: &mut std::ops::Range<usize>; // in scope 0 at $DIR/loops.rs:+1:14: +1:24
    let mut _7: std::option::Option<usize>; // in scope 0 at $DIR/loops.rs:+1:14: +1:24
    let mut _8: isize;                   // in scope 0 at $DIR/loops.rs:+1:5: +4:6
    let mut _9: &std::vec::Vec<impl Sized>; // in scope 0 at $DIR/loops.rs:+5:17: +5:24
    let mut _10: usize;                  // in scope 0 at $DIR/loops.rs:+5:17: +5:24
    let mut _11: std::ops::Range<usize>; // in scope 0 at $DIR/loops.rs:+5:14: +5:24
    let mut _12: std::ops::Range<usize>; // in scope 0 at $DIR/loops.rs:+5:14: +5:24
    let mut _13: &mut std::ops::Range<usize>; // in scope 0 at $DIR/loops.rs:+5:14: +5:24
    let mut _14: std::option::Option<usize>; // in scope 0 at $DIR/loops.rs:+5:14: +5:24
    let mut _15: isize;                  // in scope 0 at $DIR/loops.rs:+5:5: +8:6
    let mut _17: &std::vec::Vec<impl Sized>; // in scope 0 at $DIR/loops.rs:+6:18: +6:19
    let _18: &impl Sized;                // in scope 0 at $DIR/loops.rs:+6:18: +6:22
    let mut _20: (usize, &impl Sized);   // in scope 0 at $DIR/loops.rs:+7:16: +7:22
    let _21: ();                         // in scope 0 at $DIR/loops.rs:+5:14: +5:24
    let mut _23: &mut std::vec::Vec<impl Sized>; // in scope 0 at $DIR/loops.rs:+2:22: +2:23
    let mut _24: &mut impl Sized;        // in scope 0 at $DIR/loops.rs:+2:22: +2:26
    let mut _26: (usize, &mut impl Sized); // in scope 0 at $DIR/loops.rs:+3:16: +3:22
    let _27: ();                         // in scope 0 at $DIR/loops.rs:+1:14: +1:24
    scope 1 {
        debug iter => _5;                // in scope 1 at $DIR/loops.rs:+1:14: +1:24
        let _22: usize;                  // in scope 1 at $DIR/loops.rs:+1:9: +1:10
        scope 2 {
            debug i => _22;              // in scope 2 at $DIR/loops.rs:+1:9: +1:10
            let _25: &mut impl Sized;    // in scope 2 at $DIR/loops.rs:+2:13: +2:14
            scope 3 {
                debug x => _25;          // in scope 3 at $DIR/loops.rs:+2:13: +2:14
            }
        }
        scope 9 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/loops.rs:13:14: 13:24
            debug self => _6;            // in scope 9 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        }
    }
    scope 4 {
        debug iter => _12;               // in scope 4 at $DIR/loops.rs:+5:14: +5:24
        let _16: usize;                  // in scope 4 at $DIR/loops.rs:+5:9: +5:10
        scope 5 {
            debug i => _16;              // in scope 5 at $DIR/loops.rs:+5:9: +5:10
            let _19: &impl Sized;        // in scope 5 at $DIR/loops.rs:+6:13: +6:14
            scope 6 {
                debug x => _19;          // in scope 6 at $DIR/loops.rs:+6:13: +6:14
            }
        }
        scope 12 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/loops.rs:17:14: 17:24
            debug self => _13;           // in scope 12 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        }
    }
    scope 7 (inlined Vec::<impl Sized>::len) { // at $DIR/loops.rs:13:19: 13:24
        debug self => _2;                // in scope 7 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
    }
    scope 8 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) { // at $DIR/loops.rs:13:14: 13:24
        debug self => _4;                // in scope 8 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL
    }
    scope 10 (inlined Vec::<impl Sized>::len) { // at $DIR/loops.rs:17:19: 17:24
        debug self => _9;                // in scope 10 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
    }
    scope 11 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) { // at $DIR/loops.rs:17:14: 17:24
        debug self => _11;               // in scope 11 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at $DIR/loops.rs:+1:17: +1:24
        StorageLive(_2);                 // scope 0 at $DIR/loops.rs:+1:17: +1:24
        _2 = &_1;                        // scope 0 at $DIR/loops.rs:+1:17: +1:24
        _3 = ((*_2).1: usize);           // scope 7 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
        StorageDead(_2);                 // scope 0 at $DIR/loops.rs:+1:23: +1:24
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _3 }; // scope 0 at $DIR/loops.rs:+1:14: +1:24
        StorageDead(_3);                 // scope 0 at $DIR/loops.rs:+1:23: +1:24
        StorageLive(_5);                 // scope 0 at $DIR/loops.rs:+1:14: +1:24
        _5 = move _4;                    // scope 0 at $DIR/loops.rs:+1:14: +1:24
        goto -> bb1;                     // scope 1 at $DIR/loops.rs:+1:5: +4:6
    }

    bb1: {
        StorageLive(_7);                 // scope 1 at $DIR/loops.rs:+1:14: +1:24
        _6 = &mut _5;                    // scope 1 at $DIR/loops.rs:+1:14: +1:24
        _7 = <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next(_6) -> [return: bb2, unwind: bb15]; // scope 9 at $SRC_DIR/core/src/iter/range.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = discriminant(_7);           // scope 1 at $DIR/loops.rs:+1:14: +1:24
        switchInt(move _8) -> [0: bb3, 1: bb11, otherwise: bb14]; // scope 1 at $DIR/loops.rs:+1:14: +1:24
    }

    bb3: {
        StorageDead(_7);                 // scope 1 at $DIR/loops.rs:+4:5: +4:6
        StorageDead(_5);                 // scope 0 at $DIR/loops.rs:+4:5: +4:6
        StorageLive(_10);                // scope 0 at $DIR/loops.rs:+5:17: +5:24
        StorageLive(_9);                 // scope 0 at $DIR/loops.rs:+5:17: +5:24
        _9 = &_1;                        // scope 0 at $DIR/loops.rs:+5:17: +5:24
        _10 = ((*_9).1: usize);          // scope 10 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
        StorageDead(_9);                 // scope 0 at $DIR/loops.rs:+5:23: +5:24
        _11 = std::ops::Range::<usize> { start: const 0_usize, end: move _10 }; // scope 0 at $DIR/loops.rs:+5:14: +5:24
        StorageDead(_10);                // scope 0 at $DIR/loops.rs:+5:23: +5:24
        StorageLive(_12);                // scope 0 at $DIR/loops.rs:+5:14: +5:24
        _12 = move _11;                  // scope 0 at $DIR/loops.rs:+5:14: +5:24
        goto -> bb4;                     // scope 4 at $DIR/loops.rs:+5:5: +8:6
    }

    bb4: {
        StorageLive(_14);                // scope 4 at $DIR/loops.rs:+5:14: +5:24
        _13 = &mut _12;                  // scope 4 at $DIR/loops.rs:+5:14: +5:24
        _14 = <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next(_13) -> [return: bb5, unwind: bb15]; // scope 12 at $SRC_DIR/core/src/iter/range.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = discriminant(_14);         // scope 4 at $DIR/loops.rs:+5:14: +5:24
        switchInt(move _15) -> [0: bb6, 1: bb8, otherwise: bb14]; // scope 4 at $DIR/loops.rs:+5:14: +5:24
    }

    bb6: {
        StorageDead(_14);                // scope 4 at $DIR/loops.rs:+8:5: +8:6
        StorageDead(_12);                // scope 0 at $DIR/loops.rs:+8:5: +8:6
        drop(_1) -> bb7;                 // scope 0 at $DIR/loops.rs:+9:1: +9:2
    }

    bb7: {
        return;                          // scope 0 at $DIR/loops.rs:+9:2: +9:2
    }

    bb8: {
        _16 = ((_14 as Some).0: usize);  // scope 4 at $DIR/loops.rs:+5:9: +5:10
        StorageLive(_18);                // scope 5 at $DIR/loops.rs:+6:18: +6:22
        StorageLive(_17);                // scope 5 at $DIR/loops.rs:+6:18: +6:19
        _17 = &_1;                       // scope 5 at $DIR/loops.rs:+6:18: +6:19
        _18 = <Vec<impl Sized> as Index<usize>>::index(move _17, _16) -> [return: bb9, unwind: bb15]; // scope 5 at $DIR/loops.rs:+6:18: +6:22
                                         // mir::Constant
                                         // + span: $DIR/loops.rs:18:18: 18:22
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<impl Sized>, usize) -> &'a <Vec<impl Sized> as Index<usize>>::Output {<Vec<impl Sized> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb9: {
        StorageDead(_17);                // scope 5 at $DIR/loops.rs:+6:21: +6:22
        _19 = _18;                       // scope 5 at $DIR/loops.rs:+6:17: +6:22
        StorageLive(_20);                // scope 6 at $DIR/loops.rs:+7:16: +7:22
        _20 = (_16, _19);                // scope 6 at $DIR/loops.rs:+7:16: +7:22
        _21 = opaque::<(usize, &impl Sized)>(move _20) -> [return: bb10, unwind: bb15]; // scope 6 at $DIR/loops.rs:+7:9: +7:23
                                         // mir::Constant
                                         // + span: $DIR/loops.rs:19:9: 19:15
                                         // + literal: Const { ty: fn((usize, &impl Sized)) {opaque::<(usize, &impl Sized)>}, val: Value(<ZST>) }
    }

    bb10: {
        StorageDead(_20);                // scope 6 at $DIR/loops.rs:+7:22: +7:23
        StorageDead(_18);                // scope 5 at $DIR/loops.rs:+8:5: +8:6
        StorageDead(_14);                // scope 4 at $DIR/loops.rs:+8:5: +8:6
        goto -> bb4;                     // scope 4 at $DIR/loops.rs:+5:5: +8:6
    }

    bb11: {
        _22 = ((_7 as Some).0: usize);   // scope 1 at $DIR/loops.rs:+1:9: +1:10
        StorageLive(_24);                // scope 2 at $DIR/loops.rs:+2:22: +2:26
        StorageLive(_23);                // scope 2 at $DIR/loops.rs:+2:22: +2:23
        _23 = &mut _1;                   // scope 2 at $DIR/loops.rs:+2:22: +2:23
        _24 = <Vec<impl Sized> as IndexMut<usize>>::index_mut(move _23, _22) -> [return: bb12, unwind: bb15]; // scope 2 at $DIR/loops.rs:+2:22: +2:26
                                         // mir::Constant
                                         // + span: $DIR/loops.rs:14:22: 14:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<impl Sized>, usize) -> &'a mut <Vec<impl Sized> as Index<usize>>::Output {<Vec<impl Sized> as IndexMut<usize>>::index_mut}, val: Value(<ZST>) }
    }

    bb12: {
        StorageDead(_23);                // scope 2 at $DIR/loops.rs:+2:25: +2:26
        _25 = _24;                       // scope 2 at $DIR/loops.rs:+2:17: +2:26
        StorageLive(_26);                // scope 3 at $DIR/loops.rs:+3:16: +3:22
        _26 = (_22, move _25);           // scope 3 at $DIR/loops.rs:+3:16: +3:22
        _27 = opaque::<(usize, &mut impl Sized)>(move _26) -> [return: bb13, unwind: bb15]; // scope 3 at $DIR/loops.rs:+3:9: +3:23
                                         // mir::Constant
                                         // + span: $DIR/loops.rs:15:9: 15:15
                                         // + literal: Const { ty: fn((usize, &mut impl Sized)) {opaque::<(usize, &mut impl Sized)>}, val: Value(<ZST>) }
    }

    bb13: {
        StorageDead(_26);                // scope 3 at $DIR/loops.rs:+3:22: +3:23
        StorageDead(_24);                // scope 2 at $DIR/loops.rs:+4:5: +4:6
        StorageDead(_7);                 // scope 1 at $DIR/loops.rs:+4:5: +4:6
        goto -> bb1;                     // scope 1 at $DIR/loops.rs:+1:5: +4:6
    }

    bb14: {
        unreachable;                     // scope 1 at $DIR/loops.rs:+1:14: +1:24
    }

    bb15 (cleanup): {
        drop(_1) -> [return: bb16, unwind terminate]; // scope 0 at $DIR/loops.rs:+9:1: +9:2
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at $DIR/loops.rs:+0:1: +9:2
    }
}
