// MIR for `range_loop` after PreCodegen

fn range_loop(_1: &[T], _2: impl Fn(usize, &T)) -> () {
    debug slice => _1;                   // in scope 0 at $DIR/slice_iter.rs:+0:26: +0:31
    debug f => _2;                       // in scope 0 at $DIR/slice_iter.rs:+0:42: +0:43
    let mut _0: ();                      // return place in scope 0 at $DIR/slice_iter.rs:+0:65: +0:65
    let mut _3: usize;                   // in scope 0 at $DIR/slice_iter.rs:+1:17: +1:28
    let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28
    let mut _5: std::ops::Range<usize>;  // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28
    let mut _6: &mut std::ops::Range<usize>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28
    let mut _7: std::option::Option<usize>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28
    let mut _8: isize;                   // in scope 0 at $DIR/slice_iter.rs:+1:5: +4:6
    let mut _10: usize;                  // in scope 0 at $DIR/slice_iter.rs:+2:18: +2:26
    let mut _11: bool;                   // in scope 0 at $DIR/slice_iter.rs:+2:18: +2:26
    let mut _13: &impl Fn(usize, &T);    // in scope 0 at $DIR/slice_iter.rs:+3:9: +3:10
    let mut _14: (usize, &T);            // in scope 0 at $DIR/slice_iter.rs:+3:9: +3:16
    let _15: ();                         // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28
    scope 1 {
        debug iter => _5;                // in scope 1 at $DIR/slice_iter.rs:+1:14: +1:28
        let _9: usize;                   // in scope 1 at $DIR/slice_iter.rs:+1:9: +1:10
        scope 2 {
            debug i => _9;               // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10
            let _12: &T;                 // in scope 2 at $DIR/slice_iter.rs:+2:13: +2:14
            scope 3 {
                debug x => _12;          // in scope 3 at $DIR/slice_iter.rs:+2:13: +2:14
            }
        }
        scope 5 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/slice_iter.rs:49:14: 49:28
            debug self => _6;            // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        }
    }
    scope 4 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) { // at $DIR/slice_iter.rs:49:14: 49:28
        debug self => _4;                // in scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at $DIR/slice_iter.rs:+1:17: +1:28
        _3 = Len((*_1));                 // scope 0 at $DIR/slice_iter.rs:+1:17: +1:28
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _3 }; // scope 0 at $DIR/slice_iter.rs:+1:14: +1:28
        StorageDead(_3);                 // scope 0 at $DIR/slice_iter.rs:+1:27: +1:28
        StorageLive(_5);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:28
        _5 = move _4;                    // scope 0 at $DIR/slice_iter.rs:+1:14: +1:28
        goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +4:6
    }

    bb1: {
        StorageLive(_7);                 // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28
        _6 = &mut _5;                    // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28
        _7 = <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next(_6) -> [return: bb2, unwind: bb9]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = discriminant(_7);           // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb8]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28
    }

    bb3: {
        StorageDead(_7);                 // scope 1 at $DIR/slice_iter.rs:+4:5: +4:6
        StorageDead(_5);                 // scope 0 at $DIR/slice_iter.rs:+4:5: +4:6
        drop(_2) -> bb4;                 // scope 0 at $DIR/slice_iter.rs:+5:1: +5:2
    }

    bb4: {
        return;                          // scope 0 at $DIR/slice_iter.rs:+5:2: +5:2
    }

    bb5: {
        _9 = ((_7 as Some).0: usize);    // scope 1 at $DIR/slice_iter.rs:+1:9: +1:10
        _10 = Len((*_1));                // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26
        _11 = Lt(_9, _10);               // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb6, unwind: bb9]; // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26
    }

    bb6: {
        _12 = &(*_1)[_9];                // scope 2 at $DIR/slice_iter.rs:+2:17: +2:26
        StorageLive(_13);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:10
        _13 = &_2;                       // scope 3 at $DIR/slice_iter.rs:+3:9: +3:10
        StorageLive(_14);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16
        _14 = (_9, _12);                 // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16
        _15 = <impl Fn(usize, &T) as Fn<(usize, &T)>>::call(move _13, move _14) -> [return: bb7, unwind: bb9]; // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16
                                         // mir::Constant
                                         // + span: $DIR/slice_iter.rs:51:9: 51:10
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a impl Fn(usize, &T), (usize, &T)) -> <impl Fn(usize, &T) as FnOnce<(usize, &T)>>::Output {<impl Fn(usize, &T) as Fn<(usize, &T)>>::call}, val: Value(<ZST>) }
    }

    bb7: {
        StorageDead(_14);                // scope 3 at $DIR/slice_iter.rs:+3:15: +3:16
        StorageDead(_13);                // scope 3 at $DIR/slice_iter.rs:+3:15: +3:16
        StorageDead(_7);                 // scope 1 at $DIR/slice_iter.rs:+4:5: +4:6
        goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +4:6
    }

    bb8: {
        unreachable;                     // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate]; // scope 0 at $DIR/slice_iter.rs:+5:1: +5:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at $DIR/slice_iter.rs:+0:1: +5:2
    }
}
