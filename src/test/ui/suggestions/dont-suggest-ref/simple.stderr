error[E0507]: cannot move out of `s` which is behind a shared reference
  --> $DIR/simple.rs:38:17
   |
LL |     let X(_t) = *s;
   |           --    ^^
   |           |
   |           data moved here
   |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     let X(_t) = &*s;
   |                 +

error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference
  --> $DIR/simple.rs:41:30
   |
LL |     if let Either::One(_t) = *r { }
   |                        --    ^^
   |                        |
   |                        data moved here
   |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     if let Either::One(_t) = &*r { }
   |                              +

error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference
  --> $DIR/simple.rs:44:33
   |
LL |     while let Either::One(_t) = *r { }
   |                           --    ^^
   |                           |
   |                           data moved here
   |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     while let Either::One(_t) = &*r { }
   |                                 +

error[E0507]: cannot move out of `r` as enum variant `Two` which is behind a shared reference
  --> $DIR/simple.rs:47:11
   |
LL |     match *r {
   |           ^^
...
LL |         Either::One(_t)
   |                     --
   |                     |
   |                     data moved here
   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     match &*r {
   |           +

error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference
  --> $DIR/simple.rs:53:11
   |
LL |     match *r {
   |           ^^
...
LL |         Either::One(_t) => (),
   |                     --
   |                     |
   |                     data moved here
   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     match &*r {
   |           +

error[E0507]: cannot move out of `sm` which is behind a mutable reference
  --> $DIR/simple.rs:61:17
   |
LL |     let X(_t) = *sm;
   |           --    ^^^
   |           |
   |           data moved here
   |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     let X(_t) = &*sm;
   |                 +

error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference
  --> $DIR/simple.rs:64:30
   |
LL |     if let Either::One(_t) = *rm { }
   |                        --    ^^^
   |                        |
   |                        data moved here
   |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     if let Either::One(_t) = &*rm { }
   |                              +

error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference
  --> $DIR/simple.rs:67:33
   |
LL |     while let Either::One(_t) = *rm { }
   |                           --    ^^^
   |                           |
   |                           data moved here
   |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     while let Either::One(_t) = &*rm { }
   |                                 +

error[E0507]: cannot move out of `rm` as enum variant `Two` which is behind a mutable reference
  --> $DIR/simple.rs:70:11
   |
LL |     match *rm {
   |           ^^^
...
LL |         Either::One(_t)
   |                     --
   |                     |
   |                     data moved here
   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     match &*rm {
   |           +

error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference
  --> $DIR/simple.rs:76:11
   |
LL |     match *rm {
   |           ^^^
...
LL |         Either::One(_t) => (),
   |                     --
   |                     |
   |                     data moved here
   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     match &*rm {
   |           +

error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference
  --> $DIR/simple.rs:83:11
   |
LL |     match *rm {
   |           ^^^
...
LL |         Either::One(_t) => (),
   |                     --
   |                     |
   |                     data moved here
   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     match &*rm {
   |           +

error[E0507]: cannot move out of index of `Vec<X>`
  --> $DIR/simple.rs:91:17
   |
LL |     let X(_t) = vs[0];
   |           --    ^^^^^
   |           |
   |           data moved here
   |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     let X(_t) = &vs[0];
   |                 +

error[E0507]: cannot move out of index of `Vec<Either>`
  --> $DIR/simple.rs:94:30
   |
LL |     if let Either::One(_t) = vr[0] { }
   |                        --    ^^^^^
   |                        |
   |                        data moved here
   |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     if let Either::One(_t) = &vr[0] { }
   |                              +

error[E0507]: cannot move out of index of `Vec<Either>`
  --> $DIR/simple.rs:97:33
   |
LL |     while let Either::One(_t) = vr[0] { }
   |                           --    ^^^^^
   |                           |
   |                           data moved here
   |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     while let Either::One(_t) = &vr[0] { }
   |                                 +

error[E0507]: cannot move out of index of `Vec<Either>`
  --> $DIR/simple.rs:100:11
   |
LL |     match vr[0] {
   |           ^^^^^
...
LL |         Either::One(_t)
   |                     --
   |                     |
   |                     data moved here
   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     match &vr[0] {
   |           +

error[E0507]: cannot move out of index of `Vec<Either>`
  --> $DIR/simple.rs:106:11
   |
LL |     match vr[0] {
   |           ^^^^^
...
LL |         Either::One(_t) => (),
   |                     --
   |                     |
   |                     data moved here
   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     match &vr[0] {
   |           +

error[E0507]: cannot move out of index of `Vec<X>`
  --> $DIR/simple.rs:114:17
   |
LL |     let X(_t) = vsm[0];
   |           --    ^^^^^^
   |           |
   |           data moved here
   |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     let X(_t) = &vsm[0];
   |                 +

error[E0507]: cannot move out of index of `Vec<Either>`
  --> $DIR/simple.rs:117:30
   |
LL |     if let Either::One(_t) = vrm[0] { }
   |                        --    ^^^^^^
   |                        |
   |                        data moved here
   |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     if let Either::One(_t) = &vrm[0] { }
   |                              +

error[E0507]: cannot move out of index of `Vec<Either>`
  --> $DIR/simple.rs:120:33
   |
LL |     while let Either::One(_t) = vrm[0] { }
   |                           --    ^^^^^^
   |                           |
   |                           data moved here
   |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     while let Either::One(_t) = &vrm[0] { }
   |                                 +

error[E0507]: cannot move out of index of `Vec<Either>`
  --> $DIR/simple.rs:123:11
   |
LL |     match vrm[0] {
   |           ^^^^^^
...
LL |         Either::One(_t)
   |                     --
   |                     |
   |                     data moved here
   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     match &vrm[0] {
   |           +

error[E0507]: cannot move out of index of `Vec<Either>`
  --> $DIR/simple.rs:129:11
   |
LL |     match vrm[0] {
   |           ^^^^^^
...
LL |         Either::One(_t) => (),
   |                     --
   |                     |
   |                     data moved here
   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     match &vrm[0] {
   |           +

error[E0507]: cannot move out of index of `Vec<Either>`
  --> $DIR/simple.rs:136:11
   |
LL |     match vrm[0] {
   |           ^^^^^^
...
LL |         Either::One(_t) => (),
   |                     --
   |                     |
   |                     data moved here
   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     match &vrm[0] {
   |           +

error[E0507]: cannot move out of `s` which is behind a shared reference
  --> $DIR/simple.rs:146:18
   |
LL |     let &X(_t) = s;
   |            --    ^
   |            |
   |            data moved here
   |            move occurs because `_t` has type `Y`, which does not implement the `Copy` trait
   |
help: consider removing the borrow
   |
LL -     let &X(_t) = s;
LL +     let X(_t) = s;
   |

error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference
  --> $DIR/simple.rs:149:31
   |
LL |     if let &Either::One(_t) = r { }
   |                         --    ^
   |                         |
   |                         data moved here
   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the borrow
   |
LL -     if let &Either::One(_t) = r { }
LL +     if let Either::One(_t) = r { }
   |

error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference
  --> $DIR/simple.rs:152:34
   |
LL |     while let &Either::One(_t) = r { }
   |                            --    ^
   |                            |
   |                            data moved here
   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the borrow
   |
LL -     while let &Either::One(_t) = r { }
LL +     while let Either::One(_t) = r { }
   |

error[E0507]: cannot move out of `r` as enum variant `Two` which is behind a shared reference
  --> $DIR/simple.rs:155:11
   |
LL |     match r {
   |           ^
LL |
LL |         &Either::One(_t)
   |                      --
   |                      |
   |                      data moved here
   |                      move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the borrow
   |
LL -         &Either::One(_t)
LL +         Either::One(_t)
   |

error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference
  --> $DIR/simple.rs:162:11
   |
LL |     match r {
   |           ^
LL |
LL |         &Either::One(_t) => (),
   |                      --
   |                      |
   |                      data moved here
   |                      move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the borrow
   |
LL -         &Either::One(_t) => (),
LL +         Either::One(_t) => (),
   |

error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference
  --> $DIR/simple.rs:168:11
   |
LL |     match r {
   |           ^
LL |
LL |         &Either::One(_t) => (),
   |                      --
   |                      |
   |                      data moved here
   |                      move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the borrow
   |
LL -         &Either::One(_t) => (),
LL +         Either::One(_t) => (),
   |

error[E0507]: cannot move out of `sm` which is behind a mutable reference
  --> $DIR/simple.rs:178:22
   |
LL |     let &mut X(_t) = sm;
   |                --    ^^
   |                |
   |                data moved here
   |                move occurs because `_t` has type `Y`, which does not implement the `Copy` trait
   |
help: consider removing the mutable borrow
   |
LL -     let &mut X(_t) = sm;
LL +     let mut X(_t) = sm;
   |

error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference
  --> $DIR/simple.rs:181:35
   |
LL |     if let &mut Either::One(_t) = rm { }
   |                             --    ^^
   |                             |
   |                             data moved here
   |                             move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the mutable borrow
   |
LL -     if let &mut Either::One(_t) = rm { }
LL +     if let mut Either::One(_t) = rm { }
   |

error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference
  --> $DIR/simple.rs:184:38
   |
LL |     while let &mut Either::One(_t) = rm { }
   |                                --    ^^
   |                                |
   |                                data moved here
   |                                move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the mutable borrow
   |
LL -     while let &mut Either::One(_t) = rm { }
LL +     while let mut Either::One(_t) = rm { }
   |

error[E0507]: cannot move out of `rm` as enum variant `Two` which is behind a mutable reference
  --> $DIR/simple.rs:187:11
   |
LL |     match rm {
   |           ^^
LL |
LL |         &mut Either::One(_t) => (),
   |                          -- data moved here
LL |
LL |         &mut Either::Two(_t) => (),
   |                          -- ...and here
   |
   = note: move occurs because these variables have types that don't implement the `Copy` trait
help: consider removing the mutable borrow
   |
LL -         &mut Either::One(_t) => (),
LL +         mut Either::One(_t) => (),
   |
help: consider removing the mutable borrow
   |
LL -         &mut Either::Two(_t) => (),
LL +         mut Either::Two(_t) => (),
   |

error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference
  --> $DIR/simple.rs:194:11
   |
LL |     match rm {
   |           ^^
LL |
LL |         &mut Either::One(_t) => (),
   |                          --
   |                          |
   |                          data moved here
   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the mutable borrow
   |
LL -         &mut Either::One(_t) => (),
LL +         mut Either::One(_t) => (),
   |

error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference
  --> $DIR/simple.rs:200:11
   |
LL |     match rm {
   |           ^^
LL |
LL |         &mut Either::One(_t) => (),
   |                          --
   |                          |
   |                          data moved here
   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the mutable borrow
   |
LL -         &mut Either::One(_t) => (),
LL +         mut Either::One(_t) => (),
   |

error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference
  --> $DIR/simple.rs:206:11
   |
LL |     match rm {
   |           ^^
LL |
LL |         &mut Either::One(_t) => (),
   |                          --
   |                          |
   |                          data moved here
   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the mutable borrow
   |
LL -         &mut Either::One(_t) => (),
LL +         mut Either::One(_t) => (),
   |

error[E0507]: cannot move out of a shared reference
  --> $DIR/simple.rs:220:21
   |
LL |     let (&X(_t),) = (&x.clone(),);
   |             --      ^^^^^^^^^^^^^
   |             |
   |             data moved here
   |             move occurs because `_t` has type `Y`, which does not implement the `Copy` trait

error[E0507]: cannot move out of a shared reference
  --> $DIR/simple.rs:222:34
   |
LL |     if let (&Either::One(_t),) = (&e.clone(),) { }
   |                          --      ^^^^^^^^^^^^^
   |                          |
   |                          data moved here
   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait

error[E0507]: cannot move out of a shared reference
  --> $DIR/simple.rs:224:37
   |
LL |     while let (&Either::One(_t),) = (&e.clone(),) { }
   |                             --      ^^^^^^^^^^^^^
   |                             |
   |                             data moved here
   |                             move occurs because `_t` has type `X`, which does not implement the `Copy` trait

error[E0507]: cannot move out of a shared reference
  --> $DIR/simple.rs:226:11
   |
LL |     match (&e.clone(),) {
   |           ^^^^^^^^^^^^^
LL |
LL |         (&Either::One(_t),)
   |                       --
   |                       |
   |                       data moved here
   |                       move occurs because `_t` has type `X`, which does not implement the `Copy` trait

error[E0507]: cannot move out of a mutable reference
  --> $DIR/simple.rs:234:25
   |
LL |     let (&mut X(_t),) = (&mut xm.clone(),);
   |                 --      ^^^^^^^^^^^^^^^^^^
   |                 |
   |                 data moved here
   |                 move occurs because `_t` has type `Y`, which does not implement the `Copy` trait

error[E0507]: cannot move out of a mutable reference
  --> $DIR/simple.rs:236:38
   |
LL |     if let (&mut Either::One(_t),) = (&mut em.clone(),) { }
   |                              --      ^^^^^^^^^^^^^^^^^^
   |                              |
   |                              data moved here
   |                              move occurs because `_t` has type `X`, which does not implement the `Copy` trait

error[E0507]: cannot move out of a mutable reference
  --> $DIR/simple.rs:238:41
   |
LL |     while let (&mut Either::One(_t),) = (&mut em.clone(),) { }
   |                                 --      ^^^^^^^^^^^^^^^^^^
   |                                 |
   |                                 data moved here
   |                                 move occurs because `_t` has type `X`, which does not implement the `Copy` trait

error[E0507]: cannot move out of a mutable reference
  --> $DIR/simple.rs:240:11
   |
LL |     match (&mut em.clone(),) {
   |           ^^^^^^^^^^^^^^^^^^
LL |
LL |         (&mut Either::One(_t),) => (),
   |                           -- data moved here
LL |         (&mut Either::Two(_t),) => (),
   |                           -- ...and here
   |
   = note: move occurs because these variables have types that don't implement the `Copy` trait

error[E0507]: cannot move out of a shared reference
  --> $DIR/simple.rs:250:18
   |
LL |     let &X(_t) = &x;
   |            --    ^^
   |            |
   |            data moved here
   |            move occurs because `_t` has type `Y`, which does not implement the `Copy` trait
   |
help: consider removing the borrow
   |
LL -     let &X(_t) = &x;
LL +     let X(_t) = &x;
   |

error[E0507]: cannot move out of a shared reference
  --> $DIR/simple.rs:253:31
   |
LL |     if let &Either::One(_t) = &e { }
   |                         --    ^^
   |                         |
   |                         data moved here
   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the borrow
   |
LL -     if let &Either::One(_t) = &e { }
LL +     if let Either::One(_t) = &e { }
   |

error[E0507]: cannot move out of a shared reference
  --> $DIR/simple.rs:256:34
   |
LL |     while let &Either::One(_t) = &e { }
   |                            --    ^^
   |                            |
   |                            data moved here
   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the borrow
   |
LL -     while let &Either::One(_t) = &e { }
LL +     while let Either::One(_t) = &e { }
   |

error[E0507]: cannot move out of a shared reference
  --> $DIR/simple.rs:259:11
   |
LL |     match &e {
   |           ^^
LL |
LL |         &Either::One(_t)
   |                      --
   |                      |
   |                      data moved here
   |                      move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the borrow
   |
LL -         &Either::One(_t)
LL +         Either::One(_t)
   |

error[E0507]: cannot move out of a shared reference
  --> $DIR/simple.rs:266:11
   |
LL |     match &e {
   |           ^^
LL |
LL |         &Either::One(_t) => (),
   |                      --
   |                      |
   |                      data moved here
   |                      move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the borrow
   |
LL -         &Either::One(_t) => (),
LL +         Either::One(_t) => (),
   |

error[E0507]: cannot move out of a shared reference
  --> $DIR/simple.rs:272:11
   |
LL |     match &e {
   |           ^^
LL |
LL |         &Either::One(_t) => (),
   |                      --
   |                      |
   |                      data moved here
   |                      move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the borrow
   |
LL -         &Either::One(_t) => (),
LL +         Either::One(_t) => (),
   |

error[E0507]: cannot move out of a mutable reference
  --> $DIR/simple.rs:279:22
   |
LL |     let &mut X(_t) = &mut xm;
   |                --    ^^^^^^^
   |                |
   |                data moved here
   |                move occurs because `_t` has type `Y`, which does not implement the `Copy` trait
   |
help: consider removing the mutable borrow
   |
LL -     let &mut X(_t) = &mut xm;
LL +     let mut X(_t) = &mut xm;
   |

error[E0507]: cannot move out of a mutable reference
  --> $DIR/simple.rs:282:35
   |
LL |     if let &mut Either::One(_t) = &mut em { }
   |                             --    ^^^^^^^
   |                             |
   |                             data moved here
   |                             move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the mutable borrow
   |
LL -     if let &mut Either::One(_t) = &mut em { }
LL +     if let mut Either::One(_t) = &mut em { }
   |

error[E0507]: cannot move out of a mutable reference
  --> $DIR/simple.rs:285:38
   |
LL |     while let &mut Either::One(_t) = &mut em { }
   |                                --    ^^^^^^^
   |                                |
   |                                data moved here
   |                                move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the mutable borrow
   |
LL -     while let &mut Either::One(_t) = &mut em { }
LL +     while let mut Either::One(_t) = &mut em { }
   |

error[E0507]: cannot move out of a mutable reference
  --> $DIR/simple.rs:288:11
   |
LL |     match &mut em {
   |           ^^^^^^^
LL |
LL |         &mut Either::One(_t)
   |                          --
   |                          |
   |                          data moved here
   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the mutable borrow
   |
LL -         &mut Either::One(_t)
LL +         mut Either::One(_t)
   |

error[E0507]: cannot move out of a mutable reference
  --> $DIR/simple.rs:295:11
   |
LL |     match &mut em {
   |           ^^^^^^^
LL |
LL |         &mut Either::One(_t) => (),
   |                          --
   |                          |
   |                          data moved here
   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the mutable borrow
   |
LL -         &mut Either::One(_t) => (),
LL +         mut Either::One(_t) => (),
   |

error[E0507]: cannot move out of a mutable reference
  --> $DIR/simple.rs:301:11
   |
LL |     match &mut em {
   |           ^^^^^^^
LL |
LL |         &mut Either::One(_t) => (),
   |                          --
   |                          |
   |                          data moved here
   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the mutable borrow
   |
LL -         &mut Either::One(_t) => (),
LL +         mut Either::One(_t) => (),
   |

error[E0507]: cannot move out of a mutable reference
  --> $DIR/simple.rs:307:11
   |
LL |     match &mut em {
   |           ^^^^^^^
LL |
LL |         &mut Either::One(_t) => (),
   |                          --
   |                          |
   |                          data moved here
   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait
   |
help: consider removing the mutable borrow
   |
LL -         &mut Either::One(_t) => (),
LL +         mut Either::One(_t) => (),
   |

error[E0507]: cannot move out of a shared reference
  --> $DIR/simple.rs:174:11
   |
LL |     fn f1(&X(_t): &X) { }
   |           ^^^--^
   |              |
   |              data moved here
   |              move occurs because `_t` has type `Y`, which does not implement the `Copy` trait
   |
help: consider removing the borrow
   |
LL -     fn f1(&X(_t): &X) { }
LL +     fn f1(X(_t): &X) { }
   |

error[E0507]: cannot move out of a mutable reference
  --> $DIR/simple.rs:212:11
   |
LL |     fn f2(&mut X(_t): &mut X) { }
   |           ^^^^^^^--^
   |                  |
   |                  data moved here
   |                  move occurs because `_t` has type `Y`, which does not implement the `Copy` trait
   |
help: consider removing the mutable borrow
   |
LL -     fn f2(&mut X(_t): &mut X) { }
LL +     fn f2(mut X(_t): &mut X) { }
   |

error[E0507]: cannot move out of a shared reference
  --> $DIR/simple.rs:231:11
   |
LL |     fn f3((&X(_t),): (&X,)) { }
   |           ^^^^--^^^
   |               |
   |               data moved here
   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait

error[E0507]: cannot move out of a mutable reference
  --> $DIR/simple.rs:245:11
   |
LL |     fn f4((&mut X(_t),): (&mut X,)) { }
   |           ^^^^^^^^--^^^
   |                   |
   |                   data moved here
   |                   move occurs because `_t` has type `Y`, which does not implement the `Copy` trait

error[E0507]: cannot move out of `a.a` as enum variant `Some` which is behind a shared reference
  --> $DIR/simple.rs:320:14
   |
LL |     let Some(_s) = a.a else {
   |              ^^ move occurs because `a.a.0` has type `String`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
LL |     let Some(&_s) = a.a else {
   |              +

error: aborting due to 61 previous errors

For more information about this error, try `rustc --explain E0507`.
