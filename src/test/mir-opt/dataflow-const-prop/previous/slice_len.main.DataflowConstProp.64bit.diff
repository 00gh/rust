- // MIR for `main` before DataflowConstProp
+ // MIR for `main` after DataflowConstProp
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:+0:11: +0:11
      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33
      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:+1:5: +1:30
      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19
      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19
      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:+1:7: +1:19
      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:+1:31: +1:32
      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33
      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33
      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33
          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30
          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19
          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19
          _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19
                                           // mir::Constant
                                           // + span: $DIR/slice_len.rs:6:6: 6:19
                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }
          _4 = &(*_9);                     // scope 0 at $DIR/slice_len.rs:+1:6: +1:19
          _3 = &(*_4);                     // scope 0 at $DIR/slice_len.rs:+1:6: +1:19
          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19
          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19
          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32
          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32
          _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33
-         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33
-         assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33
+         _8 = Lt(const 1_usize, _7);      // scope 0 at $DIR/slice_len.rs:+1:5: +1:33
+         assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33
      }
  
      bb1: {
          _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33
          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34
          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34
          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34
          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34
          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:+0:11: +2:2
          return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2
      }
  }
  
