- // MIR for `identity` before ConstProp
+ // MIR for `identity` after ConstProp
  
  fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {
      debug x => _1;                       // in scope 0 at $DIR/separate_const_switch.rs:28:13: 28:14
      let mut _0: std::result::Result<i32, i32>; // return place in scope 0 at $DIR/separate_const_switch.rs:28:37: 28:53
      let mut _2: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10
      let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, i32>, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10
      let mut _4: std::result::Result<i32, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9
      let mut _5: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10
      let _6: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10
      let mut _7: !;                       // in scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10
      let mut _8: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10
      let _9: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10
      scope 1 {
          debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10
          scope 2 {
              scope 5 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10
                  debug residual => _8;    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
                  let _10: i32;            // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
                  let mut _11: i32;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
                  let mut _12: i32;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
                  scope 6 {
                      debug e => _10;      // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
                      scope 7 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL
                          debug t => _12;  // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL
                      }
                  }
              }
          }
      }
      scope 3 {
          debug val => _9;                 // in scope 3 at $DIR/separate_const_switch.rs:29:8: 29:10
          scope 4 {
          }
      }
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10
          StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10
          StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9
          _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9
          _3 = <Result<i32, i32> as Try>::branch(move _4) -> bb1; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10
                                           // mir::Constant
                                           // + span: $DIR/separate_const_switch.rs:29:8: 29:10
                                           // + literal: Const { ty: fn(Result<i32, i32>) -> ControlFlow<<Result<i32, i32> as Try>::Residual, <Result<i32, i32> as Try>::Output> {<Result<i32, i32> as Try>::branch}, val: Value(Scalar(<ZST>)) }
      }
  
      bb1: {
          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10
          _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10
          switchInt(move _5) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10
      }
  
      bb2: {
          StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10
          _9 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10
          _2 = _9;                         // scope 4 at $DIR/separate_const_switch.rs:29:8: 29:10
          StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10
          Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11
          ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11
          discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11
          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11
          StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:30:1: 30:2
          return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2
      }
  
      bb3: {
          StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10
          _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10
          StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10
          _8 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10
          StorageLive(_10);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
          _10 = move ((_8 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          _12 = move _10;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          _11 = move _12;                  // scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL
          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          Deinit(_0);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          ((_0 as Err).0: i32) = move _11; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          discriminant(_0) = 1;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageDead(_10);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10
          StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10
          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11
          StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:30:1: 30:2
          return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2
      }
  }
  
