use std::sync::Arc;
use {
    SyntaxNode, SyntaxRoot, TreeRoot, AstNode,
    SyntaxKind::*,
};
{% for node in ast %}
{% set Name = node.kind | camel  %}
#[derive(Debug, Clone, Copy)]
pub struct {{ Name }}<R: TreeRoot = Arc<SyntaxRoot>> {
    syntax: SyntaxNode<R>,
}

impl<R: TreeRoot> AstNode<R> for {{ Name }}<R> {
    fn cast(syntax: SyntaxNode<R>) -> Option<Self> {
        match syntax.kind() {
            {{ node.kind }} => Some({{ Name }} { syntax }),
            _ => None,
        }
    }
    fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }
}

impl<R: TreeRoot> {{ Name }}<R> {
{%- if node.collections -%}
{%- for m in node.collections -%}
{%- set method_name = m.0 -%}
{%- set ChildName = m.1 | camel %}
    pub fn {{ method_name }}<'a>(&'a self) -> impl Iterator<Item = {{ ChildName }}<R>> + 'a {
        self.syntax()
            .children()
            .filter_map({{ ChildName }}::cast)
    }
{% endfor -%}
{%- endif -%}

{%- if node.options -%}
{%- for m in node.options -%}
{%- set method_name = m.0 -%}
{%- set ChildName = m.1 | camel %}
    pub fn {{ method_name }}(&self) -> Option<{{ ChildName }}<R>> {
        self.syntax()
            .children()
            .filter_map({{ ChildName }}::cast)
            .next()
    }
{% endfor -%}
{%- endif -%}
}
{% endfor %}
